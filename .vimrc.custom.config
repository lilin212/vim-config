
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 用户自定义配置（该文件放一般性配置，可覆盖~/.vimrc里的配置，若要增加、卸载插件，请放入~/.vimrc.custom.plugins）
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 开启相对行号
" set relativenumber  

" 开启鼠标
" set mouse=a

" 设置光标所在列高亮
" set cursorcolumn

" indentLine 开启代码对齐线
" let g:indentLine_enabled = 1

" markdown
" let system = system('uname -s')
" if system == "Darwin\n"
"     let g:mkdp_path_to_chrome = "/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"
" else
"     let g:mkdp_path_to_chrome = '/usr/bin/google-chrome-stable %U'
" endif
" nmap <silent> <F7> <Plug>MarkdownPreview
" imap <silent> <F7> <Plug>MarkdownPreview
" nmap <silent> <F8> <Plug>StopMarkdownPreview
" imap <silent> <F8> <Plug>StopMarkdownPreview

" Doxygen
" let g:DoxygenToolkit_authorName="chxuan, 787280310@qq.com"
" let s:licenseTag = "Copyright(C)\<enter>"
" let s:licenseTag = s:licenseTag . "For free\<enter>"
" let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
" let g:DoxygenToolkit_licenseTag = s:licenseTag
" let g:DoxygenToolkit_briefTag_funcName="yes"
" let g:doxygen_enhanced_color=1
" let g:DoxygenToolkit_commentType="Qt"

" hi Normal ctermfg=220 ctermbg=none

" set relativenumber
set tags=./.tags;,.tags
set path=**

let g:auto_save = 1 
let g:auto_save_events = ["InsertLeave", "TextChanged"]

let Lf_PreviewInPopup = 1
let Lf_WindowPosition = "popup"

" 自动打开quickfix window，高度为6
let g:asyncrun_open = 6
" 任务结束响铃提醒
let g:asyncrun_bell = 1
" 嵌套括号显示不同颜色
let g:rainbow_active = 1

let g:indentLine_enabled = 1
let g:indentLine_char = '┊'
let g:indentLine_conceallevel = 2

" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

inoremap jk <Esc>
inoremap kk <up>
inoremap jj <down>
inoremap hh <left>
inoremap ll <right>
nnoremap <leader>c :close<cr>

map <silent><F4> :!cscope -Rbq<cr>:cs add cscope.out<cr><cr>:cs reset<cr><cr>

" 空格搜索当前光标下的单词 
nnoremap <space> :Leaderf rg -F "<c-r><c-w>" -g "*.*"<cr>

" 搜索待输入的字符
nnoremap <leader><space> :Leaderf rg -F "" -g "*.*"<left><left><left><left><left><left><left><left><left><left>

" 替换光标下的字符
nnoremap <leader><leader><space> :%s#<c-r><c-w>##g<left><left>

nnoremap <leader><leader>fr :<c-u>Leaderf --recall<cr>
nnoremap ]f :<c-u>Leaderf --next<cr>
nnoremap [f :<c-u>Leaderf --previous<cr>

highlight VertSplit ctermbg=DarkBlue
set fillchars+=vert:\#

hi CursorLine cterm=NONE ctermbg=grey ctermfg=black guibg=darkred guifg=white

"python-mode
"开启警告
let g:pymode_warnings = 0
"保存文件时自动删除无用空格
let g:pymode_trim_whitespaces = 1
let g:pymode_options = 1
"显示允许的最大长度的列
let g:pymode_options_colorcolumn = 1
"设置QuickFix窗口的最大，最小高度
let g:pymode_quickfix_minheight = 3
let g:pymode_quickfix_maxheight = 10
"使用python3
let g:pymode_python = 'python3'
"使用PEP8风格的缩进
let g:pymode_indent = 1
"取消代码折叠
let g:pymode_folding = 0
"开启python-mode定义的移动方式
let g:pymode_motion = 1
"启用python-mode内置的python文档，使用K进行查找
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'
"自动检测并启用virtualenv
let g:pymode_virtualenv = 1
"不使用python-mode运行python代码
let g:pymode_run = 0
"let g:pymode_run_bind = '<Leader>r'
"不使用python-mode设置断点
let g:pymode_breakpoint = 0
"let g:pymode_breakpoint_bind = '<leader>b'
"启用python语法检查
let g:pymode_lint = 1
"修改后保存时进行检查
let g:pymode_lint_on_write = 1
"编辑时进行检查
let g:pymode_lint_on_fly = 0
let g:pymode_lint_checkers = ['pyflakes', 'pep8']
"发现错误时不自动打开QuickFix窗口
let g:pymode_lint_cwindow = 0
"侧边栏显示python-mode相关的标志
let g:pymode_lint_signs = 1
"let g:pymode_lint_todo_symbol = 'WW'
"let g:pymode_lint_comment_symbol = 'CC'
"let g:pymode_lint_visual_symbol = 'RR'
"let g:pymode_lint_error_symbol = 'EE'
"let g:pymode_lint_info_symbol = 'II'
"let g:pymode_lint_pyflakes_symbol = 'FF'
"启用重构
let g:pymode_rope = 1
"不在父目录下查找.ropeproject，能提升响应速度
let g:pymode_rope_lookup_project = 0
"光标下单词查阅文档
let g:pymode_rope_show_doc_bind = '<C-c>d'
"项目修改后重新生成缓存
let g:pymode_rope_regenerate_on_write = 1
"开启补全，并设置<C-Tab>为默认快捷键
let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_completion_bind = '<C-Tab>'
"<C-c>g跳转到定义处，同时新建竖直窗口打开
let g:pymode_rope_goto_definition_bind = '<C-c>g'
let g:pymode_rope_goto_definition_cmd = 'vnew'
"重命名光标下的函数，方法，变量及类名
let g:pymode_rope_rename_bind = '<C-c>rr'
"重命名光标下的模块或包
let g:pymode_rope_rename_module_bind = '<C-c>r1r'
"开启python所有的语法高亮
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
"高亮缩进错误
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
"高亮空格错误
let g:pymode_syntax_space_errors = g:pymode_syntax_all

autocmd FileType rust nnoremap <F5> :AsyncRun -mode=term -pos=bottom cargo run<cr>
autocmd FileType python nnoremap <F5> :AsyncRun -cwd=$(VIM_FILEDIR) -mode=term -pos=bottom python3 "$(VIM_FILEPATH)"<cr>
autocmd FileType cpp nnoremap <F5> :AsyncRun -mode=term -pos=bottom g++ "$(VIM_FILEPATH)" -std=c++11 && ./a.out && rm ./a.out<cr>
autocmd FileType cpp nnoremap <F7> :AsyncRun -mode=term -pos=bottom g++ "$(VIM_FILEPATH)" -std=c++11 -g && gdb ./a.out && rm ./a.out<cr>
autocmd FileType sh nnoremap <F5> :AsyncRun -cwd=$(VIM_FILEDIR) -mode=term -pos=bottom $(VIM_FILEPATH)<cr>

command! Test :AsyncRun -mode=term -pos=bottom leetcode test '$(VIM_FILEPATH)'
command! TestLocal :AsyncRun -mode=term -pos=bottom leetcode test '$(VIM_FILEPATH)' --local
command! Submit :AsyncRun -mode=term -pos=bottom leetcode submit '$(VIM_FILEPATH)'

nnoremap gc :YcmCompleter GoToCallers<cr>
