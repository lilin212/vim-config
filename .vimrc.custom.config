
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 用户自定义配置（该文件放一般性配置，可覆盖~/.vimrc里的配置，若要增加、卸载插件，请放入~/.vimrc.custom.plugins）
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 开启相对行号
" set relativenumber  

" 开启鼠标
" set mouse=a

" 设置光标所在列高亮
" set cursorcolumn

" indentLine 开启代码对齐线
" let g:indentLine_enabled = 1

" markdown
" let system = system('uname -s')
" if system == "Darwin\n"
"     let g:mkdp_path_to_chrome = "/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"
" else
"     let g:mkdp_path_to_chrome = '/usr/bin/google-chrome-stable %U'
" endif
" nmap <silent> <F7> <Plug>MarkdownPreview
" imap <silent> <F7> <Plug>MarkdownPreview
" nmap <silent> <F8> <Plug>StopMarkdownPreview
" imap <silent> <F8> <Plug>StopMarkdownPreview

" Doxygen
" let g:DoxygenToolkit_authorName="chxuan, 787280310@qq.com"
" let s:licenseTag = "Copyright(C)\<enter>"
" let s:licenseTag = s:licenseTag . "For free\<enter>"
" let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
" let g:DoxygenToolkit_licenseTag = s:licenseTag
" let g:DoxygenToolkit_briefTag_funcName="yes"
" let g:doxygen_enhanced_color=1
" let g:DoxygenToolkit_commentType="Qt"

" hi Normal ctermfg=220 ctermbg=none

" set relativenumber
set tags=./.tags;,.tags
set path=**

let g:auto_save = 1 
let g:auto_save_events = ["InsertLeave", "TextChanged"]

let Lf_PreviewInPopup = 1
let Lf_WindowPosition = "popup"
let Lf_PopupWidth = 80
let Lf_PopupHeight = 17

" 自动打开quickfix window，高度为6
let g:asyncrun_open = 6
" 任务结束响铃提醒
let g:asyncrun_bell = 1
" 嵌套括号显示不同颜色
let g:rainbow_active = 1

let g:indentLine_enabled = 1
let g:indentLine_char = '┊'
let g:indentLine_conceallevel = 2


let $GTAGSLABEL = 'native-pygments'
let $GTAGSCONF = '/usr/local/share/gtags/gtags.conf'

" let g:gutentags_define_advanced_commands = 1

" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
	let g:gutentags_modules += ['gtags_cscope']
endif

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
let g:gutentags_ctags_extra_args += ['--languages=c,c++,lua']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

inoremap jk <Esc>
nnoremap <leader>c :close<cr>

map <silent><F4> :!cscope -Rbq<cr>:cs add cscope.out<cr><cr>:cs reset<cr><cr>

" 空格搜索当前光标下的单词 
nnoremap <space> :Leaderf rg -F "<c-r><c-w>" -g "*.*"<cr>

" 搜索待输入的字符
nnoremap <leader><space> :Leaderf rg -F "" -g "*.*"<left><left><left><left><left><left><left><left><left><left>

" 替换光标下的字符
nnoremap <leader><leader><space> :%s#<c-r><c-w>##g<left><left>

nnoremap <leader><leader>fr :<c-u>Leaderf --recall<cr>
nnoremap ]f :<c-u>Leaderf --next<cr>
nnoremap [f :<c-u>Leaderf --previous<cr>

highlight VertSplit ctermbg=DarkBlue
set fillchars+=vert:\#

hi CursorLine cterm=NONE ctermbg=grey ctermfg=black guibg=darkred guifg=white

autocmd FileType rust nnoremap <F5> :AsyncRun -mode=term -pos=bottom cargo run<cr>
autocmd FileType python nnoremap <F5> :AsyncRun -cwd=$(VIM_FILEDIR) -mode=term -pos=bottom python3 "$(VIM_FILEPATH)"<cr>
autocmd FileType cpp nnoremap <F5> :AsyncRun -mode=term -pos=bottom g++ "$(VIM_FILEPATH)" -std=c++11 && ./a.out && rm ./a.out<cr>
autocmd FileType cpp nnoremap <F7> :AsyncRun -mode=term -pos=bottom g++ "$(VIM_FILEPATH)" -std=c++11 -g && gdb ./a.out && rm ./a.out<cr>
autocmd FileType sh nnoremap <F5> :AsyncRun -cwd=$(VIM_FILEDIR) -mode=term -pos=bottom $(VIM_FILEPATH)<cr>

command! Test :AsyncRun -mode=term -pos=bottom leetcode test '$(VIM_FILEPATH)'
command! TestLocal :AsyncRun -mode=term -pos=bottom leetcode test '$(VIM_FILEPATH)' --local
command! Submit :AsyncRun -mode=term -pos=bottom leetcode submit '$(VIM_FILEPATH)'

" nnoremap gc :YcmCompleter GoToCallers<cr>
autocmd BufNew,BufRead *.asm set ft=asm
